{
  "fetch": {
    "test": {
      "repository": "https://github.com/StataBS/indikatoren.git"
    }
  },
  "upload": {
    "test": {
      "namedGraph": "https://linked.opendata.swiss/graph/bs/statistics",
      "graphStoreEndpoint": "http://data.zazuko.com/statabs"
    }
  },
  "tasks": {
    "raum-geojson": {
      "abstract": true,
      "steps": [
        {
          "operation": "file.read",
          "arguments": [
            "${this.inputGeoJson}"
          ]
        },
        {
          "operation": "geojson.parse",
          "arguments": [
            "${this.subjectGeoJson}",
            "http://www.opengis.net/ont/geosparql#hasGeometry"
          ]
        },
        {
          "operation": "ntriples.serialize"
        },
        {
          "operation": "file.write",
          "arguments": [
            "${this.output}"
          ]
        }
      ]
    },
    "raum": {
      "abstract": true,
      "steps": [
        {
          "operation": "file.read",
          "arguments": [
            "${this.input}"
          ]
        },
        {
          "operation": "csvw.parse",
          "arguments": [
            "${this['csv-metadata']}",
            "file://${this.input.match(/[^/]*\\.tsv/)}"
          ]
        },
        {
          "operation": "filter",
          "arguments": [
            "./input/filter-not-csvw.js"
          ]
        },
        {
          "operation": "ntriples.serialize"
        },
        {
          "operation": "bash.run",
          "arguments": [
            "sort | uniq"
          ]
        },
        {
          "operation": "file.write",
          "arguments": [
            "${this.output}"
          ]
        }
      ]
    },
    "raum-gemeinde": {
      "input": "tmp/input-data/geojson/raumeinheiten.tsv",
      "csv-metadata": "input/raum-gemeinde.csv-metadata.json",
      "output": "target/raum-gemeinde.nt",
      "steps": "raum"
    },
    "raum-gemeinde-geojson": {
      "inputGeoJson": "tmp/input-data/geojson/Gemeinde_Basel.json",
      "subjectGeoJson": "http://ld.data-bs.ch/code/raum/Gemeinde${R2_BFSNR}",
      "output": "target/raum-gemeinde-geojson.nt",
      "steps": "raum-geojson"
    },
    "raum-kanton": {
      "input": "tmp/input-data/geojson/raumeinheiten.tsv",
      "csv-metadata": "input/raum-kanton.csv-metadata.json",
      "output": "target/raum-kanton.nt",
      "steps": "raum"
    },
    "raum-kanton-geojson": {
      "inputGeoJson": "tmp/input-data/geojson/Kanton.json",
      "subjectGeoJson": "http://ld.data-bs.ch/code/raum/Kanton",
      "output": "target/raum-kanton-geojson.nt",
      "steps": "raum-geojson"
    },
    "raum-wohnbezirk": {
      "input": "tmp/input-data/geojson/raumeinheiten.tsv",
      "csv-metadata": "input/raum-wohnbezirk.csv-metadata.json",
      "output": "target/raum-wohnbezirk.nt",
      "steps": "raum"
    },
    "raum-wohnbezirk-geojson": {
      "inputGeoJson": "tmp/input-data/geojson/bezirke.json",
      "subjectGeoJson": "http://ld.data-bs.ch/code/raum/Wohnbezirk${ZTXT.match(new RegExp('0*([1-9]{1}[0-9]*)')).pop()}",
      "output": "target/raum-wohnbezirk-geojson.nt",
      "steps": "raum-geojson"
    },
    "raum-wohnviertel": {
      "input": "tmp/input-data/geojson/raumeinheiten.tsv",
      "csv-metadata": "input/raum-wohnviertel.csv-metadata.json",
      "output": "target/raum-wohnviertel.nt",
      "steps": "raum"
    },
    "raum-wohnviertel-geojson": {
      "inputGeoJson": "tmp/input-data/geojson/wohnviertel.json",
      "subjectGeoJson": "http://ld.data-bs.ch/code/raum/Wohnviertel${TXT}",
      "output": "target/raum-wohnviertel-geojson.nt",
      "steps": "raum-geojson"
    },
    "indikatoren": {
      "abstract": true,
      "steps": [
        {
          "operation": "file.read",
          "arguments": [
            "${this.input}"
          ]
        },
        {
          "operation": "csvw.parse",
          "arguments": [
            "${this['csv-metadata']}",
            "file://${this.input.match(/[^/]*\\.tsv/)}"
          ]
        },
        {
          "operation": "filter",
          "arguments": [
            "./input/filter-not-undefined.js"
          ]
        },
        {
          "operation": "filter",
          "arguments": [
            "./input/filter-not-csvw.js"
          ]
        },
        {
          "operation": "custom.jsonData",
          "arguments": [
            "${this['json-data']}",
            "http://ld.data-bs.ch/dataset/${this.input.match(/([^/]*)\\.tsv/).pop()}"
          ]
        },
        {
          "operation": "ntriples.serialize"
        },
        {
          "operation": "file.write",
          "arguments": [
            "${this.output}"
          ]
        }
      ]
    }
  }
}